// generated from rosidl_adapter/resource/msg.idl.em
// with input from vda5050_msgs/msg/Action.msg
// generated code does not contain a copyright notice

#include "vda5050_msgs/msg/ActionParameter.idl"

module vda5050_msgs {
  module msg {
    module Action_Constants {
      @verbatim (language="comment", text=
        "Enums for blockingType")
      const string NONE = "NONE";
      const string SOFT = "SOFT";
      const string HARD = "HARD";
    };
    @verbatim (language="comment", text=
      "Action the AGV can perform.")
    struct Action {
      @verbatim (language="comment", text=
        "Name of action as described in the first column" "\n"
        "of \"Actions and Parameters\"." "\n"
        "Identifies the function of the action.")
      string action_type;

      @verbatim (language="comment", text=
        "Unique ID to identify the action and map them to" "\n"
        "the actionState in the state." "\n"
        "Suggestion: Use UUIDs.")
      string action_id;

      @verbatim (language="comment", text=
        "Additional information on the action")
      string action_description;

      @verbatim (language="comment", text=
        "Enum {NONE, SOFT, HARD}" "\n"
        "“NONE” – allows driving and other actions" "\n"
        "“SOFT” - allows other actions, but not driving" "\n"
        "“HARD” - is the only allowd action at that time")
      string blocking_type;

      @verbatim (language="comment", text=
        "Array of actionParameter objects for the indicated" "\n"
        "action e. g. deviceId, loadId, external Triggers." "\n"
        "See “Actions and Parameters”." "\n"
        "" "\n"
        "Note on Porting to ROS:" "\n"
        "Since those parameter vary in type but their" "\n"
        "serialization is always a json dictionary with \"key\"" "\n"
        "and \"value\" we decided to serialize the value as" "\n"
        "string. This way the (de-)serialization has to be done by" "\n"
        "the user depending on the key, but the protocol is met")
      sequence<vda5050_msgs::msg::ActionParameter> action_parameters;
    };
  };
};
