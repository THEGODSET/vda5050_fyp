// generated from rosidl_adapter/resource/msg.idl.em
// with input from vda5050_msgs/msg/Order.msg
// generated code does not contain a copyright notice

#include "vda5050_msgs/msg/Edge.idl"
#include "vda5050_msgs/msg/Node.idl"

module vda5050_msgs {
  module msg {
    @verbatim (language="comment", text=
      "HEADER")
    struct Order {
      @verbatim (language="comment", text=
        "header ID of the message. The header_id is defined per topic and incremented by 1 with each sent" "\n"
        "(but not necessarily received) message.")
      uint32 header_id;

      @verbatim (language="comment", text=
        "Timestamp after ISO8601 in the format YYYY-MM-DDTHH:mm:ss.ssZ (e.g.“2017-04-15T11:40:03.12Z”)")
      string timestamp;

      @verbatim (language="comment", text=
        "Version of the protocol [Major].[Minor].[Patch] (e.g. 1.3.2)")
      string version;

      @verbatim (language="comment", text=
        "Manufacturer of the AGV")
      string manufacturer;

      @verbatim (language="comment", text=
        "Serial Number of the AGV")
      string serial_number;

      @verbatim (language="comment", text=
        "CONTENTS" "\n"
        "Unique order identification")
      string order_id;

      @verbatim (language="comment", text=
        "order_update identification. Is unique per order_id. If an order update is" "\n"
        "rejected, this field is to be passed in the rejection message")
      uint32 order_update_id;

      @verbatim (language="comment", text=
        "Unique identifier of the zone set that the AGV has to use for navigation or that was used by master controlfor planning" "\n"
        "Optional: Some master controlsystems do not use zones. Some AGVs do not understand zones. Do not add to message if no zones are used")
      string zone_set_id;

      @verbatim (language="comment", text=
        "Array of nodes to be traversed for fulfilling the order. The nodes come" "\n"
        "in the sequence of the fulfilling.")
      sequence<vda5050_msgs::msg::Node> nodes;

      @verbatim (language="comment", text=
        "Array of edges to be traversed for fulfilling the order")
      sequence<vda5050_msgs::msg::Edge> edges;
    };
  };
};
