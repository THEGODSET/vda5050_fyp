// generated from rosidl_adapter/resource/msg.idl.em
// with input from vda5050_msgs/msg/OrderState.msg
// generated code does not contain a copyright notice

#include "vda5050_msgs/msg/AGVPosition.idl"
#include "vda5050_msgs/msg/BatteryState.idl"
#include "vda5050_msgs/msg/CurrentAction.idl"
#include "vda5050_msgs/msg/EdgeState.idl"
#include "vda5050_msgs/msg/Error.idl"
#include "vda5050_msgs/msg/Info.idl"
#include "vda5050_msgs/msg/Load.idl"
#include "vda5050_msgs/msg/NodeState.idl"
#include "vda5050_msgs/msg/SafetyState.idl"
#include "vda5050_msgs/msg/Velocity.idl"

module vda5050_msgs {
  module msg {
    module OrderState_Constants {
      @verbatim (language="comment", text=
        "AGV is under full control of the supervisor. AGV drives and executes actions based on orders from the supervisor")
      const string AUTOMATIC = "AUTOMATIC";
      @verbatim (language="comment", text=
        "AGV is under control of the supervisor. AGV drives and executes actions based on orders from the supervisor. The driving speeds is controlled by the HMI. (speed can’t exceed the speed of automatic mode) The steering is under automatic control. (non-safe HMI possible)")
      const string SEMIAUTOMATIC = "SEMIAUTOMATIC";
      @verbatim (language="comment", text=
        "Supervisor is not in control of the AGV. Supervisor doesn’t send driving order or actions to the AGV. HMI can be used the control the steering and velocity and handling device of the AGV. Location of the AGV is send to the supervisor. When AGV enters or leaves this mode, it immediately clears all the orders. (safe HMI required)" "\n"        "Supervisor is not in control of the AGV. Supervisor doesn’t send driving order or actions to the AGV. Authorized personal can reconfigure the AGV.")
      const string MANUAL = "MANUAL";
      @verbatim (language="comment", text=
        "Supervisor is not in control of the AGV. Supervisor doesn’t send driving order or actions to the AGV. The AGV is being taught, e.g. mapping is done by a supervisor")
      const string SERVICE = "SERVICE";
      const string TEACHIN = "TEACHIN";
    };
    @verbatim (language="comment", text=
      "HEADER")
    struct OrderState {
      @verbatim (language="comment", text=
        "header ID of the message. The header_id is defined per topic and incremented by 1 with each sent" "\n"
        "(but not necessarily received) message.")
      uint32 header_id;

      @verbatim (language="comment", text=
        "Timestamp after ISO8601 in the format YYYY-MM-DDTHH:mm:ss.ssZ (e.g.“2017-04-15T11:40:03.12Z”)")
      string timestamp;

      @verbatim (language="comment", text=
        "Version of the protocol [Major].[Minor].[Patch] (e.g. 1.3.2)")
      string version;

      @verbatim (language="comment", text=
        "Manufacturer of the AGV")
      string manufacturer;

      @verbatim (language="comment", text=
        "Serial Number of the AGV")
      string serial_number;

      @verbatim (language="comment", text=
        "CONTENTS" "\n"
        "Unique order identification “none” if vehicle is idle and has no order")
      string order_id;

      @verbatim (language="comment", text=
        "order_update identification. Is unique per order_id. If an order update is rejected, this field is to be passed in the rejection message.")
      uint32 order_update_id;

      @verbatim (language="comment", text=
        "Unique ID of the zone set that the AGV currently uses for path planning. Must be the same as the one used in the order," "\n"
        "otherwise the AGV hasto reject the order. Optional: If the AGV does not use zones, this field can be omitted.")
      string zone_set_id;

      @verbatim (language="comment", text=
        "nodeId of last reached node or, if AGV is currently on a node, current node (e.g. „node7”)." "\n"
        "Empty string (\"\") if no lastNodeId is available.")
      string last_node_id;

      @verbatim (language="comment", text=
        "sequence_id of the last reached node or, if the AGV is currently on a node, sequence_id of current node." "\n"
        "“0” if no last_node_sequence_id is available.")
      uint32 last_node_sequence_id;

      @verbatim (language="comment", text=
        "Array of node_state_objects (empty list if idle)")
      sequence<vda5050_msgs::msg::NodeState> node_states;

      @verbatim (language="comment", text=
        "Array of edge_state_objects (empty list if idle)")
      sequence<vda5050_msgs::msg::EdgeState> edge_states;

      @verbatim (language="comment", text=
        "Current position of the AGV. Optional: Can only be omitted for" "\n"
        "AGVs without the capability to localize themselves, e.g. line" "\n"
        "guided AGVs.")
      vda5050_msgs::msg::AGVPosition agv_position;

      @verbatim (language="comment", text=
        "AGV's velocity in vehicle coordinates")
      vda5050_msgs::msg::Velocity velocity;

      @verbatim (language="comment", text=
        "Loads that are currently handled by the AGV." "\n"
        "Optional: If AGV cannot determine load state, leave the array out of the state." "\n"
        "If the  AGV  can determine the  load  state,  but  the  array  is  empty,  the  AGV  is considered unloaded.")
      sequence<vda5050_msgs::msg::Load> loads;

      @verbatim (language="comment", text=
        "True: indicates that the AGV is driving and/or rotating. Other" "\n"
        "movements of the AGV (e.g. lift movements) are not included here." "\n"
        "False: indicates that the AGV is neither driving nor rotating")
      boolean driving;

      @verbatim (language="comment", text=
        "True: AGV is currently in a paused state, either because of the push of a physical button on the AGV or" "\n"
        "because of an instantAction. The AGV can resume the order." "\n"
        "False: The AGV is currently not in a paused state")
      boolean paused;

      @verbatim (language="comment", text=
        "True: AGV is almost at the end of the base and will reduce speed if no new base is transmitted. Trigger for MC to send ne base" "\n"
        "False: no base update required")
      boolean new_base_requested;

      @verbatim (language="comment", text=
        "Used by line guided vehicles to indicate the distance it has been driving past the last_node_id. Distance is in meters")
      double distance_since_last_node;

      @verbatim (language="comment", text=
        "Contains a list of the current actions and the actions which are" "\n"
        "yet to be finished. This may include actions from previous nodes" "\n"
        "that are still in progress. When an action is completed, an" "\n"
        "updated state message is published with action_status set to" "\n"
        "finished and if applicable with the corresponding" "\n"
        "result_description. Completed actions are omitted from the array")
      sequence<vda5050_msgs::msg::CurrentAction> action_states;

      @verbatim (language="comment", text=
        "Contains all batteryrelated information.")
      vda5050_msgs::msg::BatteryState battery_state;

      @verbatim (language="comment", text=
        "Enum {AUTOMATIC, SEMIAUTOMATIC, MANUAL, SERVICE, TEACHIN}" "\n"
        "For additional information see chapter 6.2")
      string operating_mode;

      @verbatim (language="comment", text=
        "Array of errorobjects. Empty array if there are no errors.")
      sequence<vda5050_msgs::msg::Error> errors;

      @verbatim (language="comment", text=
        "Array of info-objects. An empty array indicates that the AGV has no information." "\n"
        "This should only be used for visualization or debugging – it must not be used for logic in master control")
      sequence<vda5050_msgs::msg::Info> informations;

      @verbatim (language="comment", text=
        "Contains all safetyrelated information." "\n"
        "Enums for operatingMode")
      vda5050_msgs::msg::SafetyState safety_state;
    };
  };
};
